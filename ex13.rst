习题 13: 参数、解包、变量
=============================================

在这节练习中，我们将讲到另外一种将变量传递给脚本的方法(所谓脚本，就是你写的 ``.rb`` 程序)。
你已经知道，如果要运行 ``ex13.rb`` ，只要在命令行运行 ``ruby ex13.rb`` 就可以了。
这句命令中的 ``ex13.rb`` 部分就是所谓的“参数(argument)”，我们现在要做的就是写一个可以接受参数的脚本。

将下面的程序写下来，后面你将看到详细解释。

.. literalinclude:: ex/ex13.rb
    :language: ruby
    :linenos:

``ARGV`` 就是“参数变量(argument variable)”，是一个非常标准的编程术语。
在其他的编程语言里你也可以看到它。变量名全部大写是因为这是一个“常数”(constant)，
意思是当它被赋值之后你就不应该去改变它了。
这个变量会接收当你运行Ruby脚本时所传入的参数。
通过后面的习题你将对它有更多的了解。

第 1 行将 ``ARGV`` “解包”(unpack)，与其将所有参数放到同一个变量下面，
我们将每个参数赋予一个变量名： ``first`` , ``second`` , 以及 ``third`` 。
脚本的名称被存在一个特殊的变量 ``$0`` 里，我们不需要解包它。
这可能听起来怪怪的，但是“解包”(unpack)可能是最好的描述方式了。
它的含义很简单：“把 ``ARGV`` 中的东西解包，将所有的参数依次赋予左边的变量名”。

接下来就是正常的打印了。

你应该看到的
-------------------

像这样运行程序：

.. code-block:: console

    ruby ex13.rb first 2nd 3rd

如果你每次使用不同的参数运行，你将看到下面的结果：

.. code-block:: console

    $ ruby ex13.rb first 2nd 3rd
    The script is called: ex13.rb
    Your first variable is: first
    Your second variable is: 2nd
    Your third variable is: 3rd

    $ ruby ex13.rb cheese apples bread
    The script is called: ex13.rb
    Your first variable is: cheese
    Your second variable is: apples
    Your third variable is: bread

    $ ruby ex13.rb Zed A. Shaw
    The script is called: ex13.rb
    Your first variable is: Zed
    Your second variable is: A.
    Your third variable is: Shaw

你其实可以将“first”、“2nd”、“3rd”替换成任意三样东西：

.. code-block:: console

    ruby ex13.rb stuff I like
    ruby ex13.rb anything 6 7

加分习题
------------

1. 给你的脚本三个以下的参数。看看会得到什么错误信息。试着解释一下。
2. 再写两个脚本，其中一个接受更少的参数，另一个接受更多的参数，在参数解包时给它们取一些有意义的变量名。
3. 把 ``STDIN.gets.chomp()`` 和 ``ARGV`` 结合到一起来用，让你的脚本从用户那里得到更多的输入。

